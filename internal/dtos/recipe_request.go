package dtos

// RecipeRequest defines the payload for creating a new recipe.
// Fields such as ID, CreatedAt, UpdatedAt, and Embedding are generated by the system.
type RecipeRequest struct {
	Title             string   `json:"title" binding:"required"`
	Ingredients       []string `json:"ingredients" binding:"required"`
	Steps             []string `json:"steps" binding:"required"`
	NutritionalInfo   string   `json:"nutritional_info,omitempty"`
	AllergyDisclaimer string   `json:"allergy_disclaimer,omitempty"`
	Appliances        []string `json:"appliances,omitempty"`
	// New fields for filtering by cuisines and diets
	Cuisines []string `json:"cuisines,omitempty"`
	Diets    []string `json:"diets,omitempty"`
	// Approved indicates whether the candidate recipe has been approved by the user.
	Approved bool `json:"approved,omitempty"`
}

// RecipeResolutionRequest defines the payload for the /resolve endpoint.
// It accepts the criteria for finding close and/or exact matches.
// If no candidate is acceptable from the database search, additional
// modification instructions can be supplied for the LLM.
type RecipeResolutionRequest struct {
	Title             string   `json:"title" binding:"required"`
	Ingredients       []string `json:"ingredients" binding:"required"`
	Steps             []string `json:"steps" binding:"required"`
	NutritionalInfo   string   `json:"nutritional_info,omitempty"`
	AllergyDisclaimer string   `json:"allergy_disclaimer,omitempty"`
	Appliances        []string `json:"appliances,omitempty"`
	// New fields for filtering by cuisines and diets
	Cuisines []string `json:"cuisines,omitempty"`
	Diets    []string `json:"diets,omitempty"`
	// Additional instructions on how to modify or generate a new recipe
	ModificationInstructions string `json:"modification_instructions,omitempty"`
}
