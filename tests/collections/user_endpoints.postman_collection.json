{
  "info": {
    "name": "User Endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "c80d9e6c-1234-4321-aaaa-0123456789ab"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ],
  "item": [
    {
      "name": "Create User - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": \"test-user-1\",\n  \"name\": \"Test User\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users"]
        }
      },
      "response": []
    },
    {
      "name": "Login User - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "Login User - Invalid JSON",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"testuser@example.com\"\n  \"password\": \"password\"\n"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Create User - Missing Fields",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": \"test-user-missing\",\n  \"name\": \"Test Missing\",\n  \"password\": \"password\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Login User - Missing Fields",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"testuser@example.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Create User - Duplicate",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": \"test-user-dup\",\n  \"name\": \"Test User Dup\",\n  \"email\": \"testdup@example.com\",\n  \"password\": \"password\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users"
          ]
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Ensure no previous duplicate registration exists",
              "pm.environment.unset('duplicateTestDone');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 201) {",
              "    // On first registration, immediately send a duplicate registration request",
              "    var duplicatePayload = {",
              "        id: \"test-user-dup\",",
              "        name: \"Test User Dup\",",
              "        email: \"testdup@example.com\",",
              "        password: \"password\"",
              "    };",
              "    pm.sendRequest({",
              "        url: pm.collectionVariables.get('baseUrl') + \"/v1/users\",",
              "        method: 'POST',",
              "        header: { 'Content-Type': 'application/json' },",
              "        body: { mode: 'raw', raw: JSON.stringify(duplicatePayload) }",
              "    }, function (err, res) {",
              "        pm.test(\"Duplicate registration returns 409\", function () {",
              "            pm.expect(res.code).to.eql(409);",
              "        });",
              "    });",
              "} else {",
              "    pm.test(\"Expected 201 for first registration\", function () {",
              "        pm.response.to.have.status(201);",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Patch Current User - Success",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Updated Name\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/me",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users",
            "me"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.test(\"User name is updated\", function () {",
              "    pm.expect(jsonData.user.name).to.eql(\"Updated Name\");",
              "});"
            ]
          }
        }
      ],
      "response": []
    }
  ]
} 