{
  "info": {
    "name": "User Endpoints",
    "description": "Collection for testing user-related endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get User Profile",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User profile retrieved successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('email');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('created_at');",
              "    pm.expect(response).to.have.property('updated_at');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update User Profile",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Updated Name\",\n    \"bio\": \"Updated bio\",\n    \"preferences\": {\n        \"theme\": \"dark\",\n        \"notifications\": true\n    }\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/users/me",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User profile updated successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.name).to.equal('Updated Name');",
              "    pm.expect(response.bio).to.equal('Updated bio');",
              "    pm.expect(response.preferences.theme).to.equal('dark');",
              "    pm.expect(response.preferences.notifications).to.equal(true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Change Password",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"current_password\": \"Test123!@#\",\n    \"new_password\": \"NewTest123!@#\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/password",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "password"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Password changed successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('message');",
              "    pm.expect(response.message).to.include('password');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User's Recipes",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/recipes?page=1&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "recipes"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User's recipes retrieved successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('recipes');",
              "    pm.expect(response.recipes).to.be.an('array');",
              "    pm.expect(response).to.have.property('total');",
              "    pm.expect(response).to.have.property('page');",
              "    pm.expect(response).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User's Favorites",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/favorites?page=1&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "favorites"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User's favorites retrieved successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('favorites');",
              "    pm.expect(response.favorites).to.be.an('array');",
              "    pm.expect(response).to.have.property('total');",
              "    pm.expect(response).to.have.property('page');",
              "    pm.expect(response).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Add Recipe to Favorites",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/favorites/{{recipe_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "favorites", "{{recipe_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Recipe added to favorites successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('message');",
              "    pm.expect(response.message).to.include('favorite');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Remove Recipe from Favorites",
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/favorites/{{recipe_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "favorites", "{{recipe_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Recipe removed from favorites successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('message');",
              "    pm.expect(response.message).to.include('removed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User's Activity",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/users/me/activity?page=1&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "users", "me", "activity"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User's activity retrieved successfully\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('activities');",
              "    pm.expect(response.activities).to.be.an('array');",
              "    pm.expect(response).to.have.property('total');",
              "    pm.expect(response).to.have.property('page');",
              "    pm.expect(response).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
} 