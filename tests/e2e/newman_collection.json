{
  "info": {
    "_postman_id": "d3b9a5d2-1234-4f9a-8c3e-abcdef123456",
    "name": "MVP E2E Tests",
    "description": "Collection for MVP E2E tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwtToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Create User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"name\": \"Test User\", \"email\": \"testuser@example.com\", \"password\": \"password1\"}"
        },
        "url": {
          "raw": "http://{{baseUrl}}/v1/users",
          "protocol": "http",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 201 || (pm.response.code === 409 && pm.response.json().error === 'user already exists')) {",
              "    console.log('User created successfully (or already exists)');",
              "} else {",
              "    console.log('User creation failed');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"email\": \"testuser@example.com\", \"password\": \"password1\"}"
        },
        "url": {
          "raw": "http://{{baseUrl}}/v1/users/login",
          "protocol": "http",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users",
            "login"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.environment.set('jwtToken', jsonData.token);",
              "    console.log('JWT Token set:', jsonData.token);",
              "} else {",
              "    console.log('Login failed');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Current User",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{baseUrl}}/v1/users/me",
          "protocol": "http",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users",
            "me"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.environment.set('userId', jsonData.id);",
              "    console.log('User ID set from current user:', jsonData.id);",
              "} else {",
              "    console.log('Failed to get current user');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Get User By ID",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/v1/users/{{userId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users",
            "{{userId}}"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.test('User ID matches', function () {",
              "         pm.expect(jsonData.id).to.eql(pm.environment.get('userId'));",
              "    });",
              "    pm.test('User has a name', function () {",
              "         pm.expect(jsonData.name).not.to.be.empty;",
              "    });",
              "    pm.test('User email is valid', function () {",
              "         pm.expect(jsonData.email).to.include('@');",
              "    });",
              "} else {",
              "    pm.test('Response status code is 200', function() {",
              "         pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Update User",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"name\": \"Updated Name\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/me",
          "protocol": "http",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "v1",
            "users",
            "me"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.test('User Name is updated', function () {",
              "         pm.expect(jsonData.name).to.eql('Updated Name');",
              "    });",
              "} else {",
              "    pm.test('Response status code is 200', function() {",
              "         pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "}"
            ]
          }
        }
      ]
    }
  ]
} 