# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PGUSER: ${{ secrets.POSTGRES_USER }}
      PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      PGDATABASE: ${{ vars.POSTGRES_DB }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      PGHOST: postgres
      PGPORT: 5432
      PORT: 8080

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create dummy .env file
        run: touch .env

      - name: Generate .env file for Docker Compose
        run: |
          echo "PGUSER=${{ secrets.POSTGRES_USER }}" > .env
          echo "PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "PGDATABASE=${{ vars.POSTGRES_DB }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "PGHOST=postgres" >> .env
          echo "PGPORT=5432" >> .env

      - name: Verify .env file exists
        run: |
          echo "Listing contents of .env:"
          ls -la .env
          echo "Dumping contents of .env:"
          cat .env
          SECRET=$(cut -d'=' -f2- .env)
          HASH=$(echo -n "$SECRET" | sha256sum | awk '{print $1}')
          echo "JWT_SECRET hash: $HASH"
          echo "Checking environment variable JWT_SECRET:"
          if [ -n "$JWT_SECRET" ]; then
              echo "JWT_SECRET environment is set."
              CLEANED_ENV=$(echo -n "$JWT_SECRET" | tr -d "\n")
              echo "Cleaned JWT_SECRET:" "$CLEANED_ENV"
              echo "Cleaned JWT_SECRET in hex:"; echo -n "$CLEANED_ENV" | hexdump -C
              ENV_HASH=$(printf "%s" "$CLEANED_ENV" | sha256sum | awk '{print $1}')
              echo "JWT_SECRET environment hash: $ENV_HASH"
              if [ "$HASH" != "$ENV_HASH" ]; then
                  echo "WARNING: JWT_SECRET hash from .env ($HASH) does not match JWT_SECRET from environment ($ENV_HASH)."
              else
                  echo "JWT_SECRET hash from .env matches environment variable."
              fi
          else
              echo "JWT_SECRET environment variable is not set."
          fi
          FILE_LEN=$(echo -n "$SECRET" | wc -c)
          ENV_LEN=$(echo -n "$CLEANED_ENV" | wc -c)
          echo "JWT_SECRET value lengths:"
          echo "Length from .env: $FILE_LEN"
          echo "Length from environment variable: $ENV_LEN"
          echo "JWT_SECRET snippet from file: ${SECRET:0:5}"
          echo "JWT_SECRET snippet from environment: ${JWT_SECRET:0:5}"
          echo "JWT_SECRET from file in hex:"
          echo -n "$SECRET" | hexdump -C
          echo "JWT_SECRET from environment in hex:"
          echo -n "$JWT_SECRET" | hexdump -C

      - name: Debug JWT_SECRET further
        run: |
          echo "JWT_SECRET raw hexdump (first 64 bytes):"
          echo -n "$JWT_SECRET" | hexdump -C | head -n 4
          echo "JWT_SECRET environment variable length: ${#JWT_SECRET}"

      - name: Print full JWT_SECRET environment variable (debug)
        run: env | grep -i jwt_secret

      - name: Extra JWT_SECRET Debug Logging
        run: |
          echo "DEBUG: JWT_SECRET length: ${#JWT_SECRET}"
          echo "DEBUG: JWT_SECRET SHA256: $(echo -n "$JWT_SECRET" | sha256sum)"
          echo "DEBUG: JWT_SECRET hexdump (first 16 bytes):"
          echo -n "$JWT_SECRET" | hexdump -C | head -n 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download

      - name: Run Unit Tests
        run: go test -v ./...

      - name: Ensure Docker secret files exist
        run: |
          mkdir -p secrets
          echo "${{ secrets.POSTGRES_PASSWORD }}" > secrets/postgres_password.txt
          echo "${{ secrets.POSTGRES_USER }}" > secrets/postgres_user.txt
          echo "${{ secrets.JWT_SECRET }}" > jwt_secret

      - name: Start Docker Services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml --env-file .env up --build -d

      - name: Debug JWT_SECRET from container environment
        run: docker compose exec app sh -c "echo 'JWT_SECRET from container:' \$JWT_SECRET"

      - name: Debug Environment Variables
        run: echo "PGUSER=$PGUSER, PGDATABASE=$PGDATABASE, JWT_SECRET=$JWT_SECRET, PGHOST=$PGHOST, PGPORT=$PGPORT"

      - name: Debug Docker Compose Config
        run: docker compose config

      - name: Run Integration Tests
        run: go test -v ./tests/core/integration/...

      - name: Display Docker Containers
        run: docker ps

      - name: Display All Containers
        run: docker ps -a

      - name: List collections folder
        run: ls -la ${{ github.workspace }}/tests/e2e

      - name: Wait for app service to be ready
        run: |
          for i in $(seq 1 10); do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "App is ready"
              exit 0
            fi
            echo "Waiting for app..."
            sleep 5
          done
          echo "App did not become ready in time" >&2
          exit 1

      - name: Run Newman E2E Tests for Collection
        run: |
          docker run --rm --network container:app \
            -v ${{ github.workspace }}/tests/e2e:/etc/newman/collections \
            postman/newman:alpine run /etc/newman/collections/newman_collection.json \
              --delay-request 500 --reporters cli,junit --global-var "baseUrl=localhost:8080"

      - name: Dump Docker Container Logs
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs

      - name: Print logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs

      - name: Debug Docker Secret File Content
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm app cat /run/secrets/jwt_secret

      - name: Ensure .env.production exists for cleanup
        run: |
          if [ ! -f .env.production ]; then
            echo 'DUMMY=true' > .env.production
          fi
          ls -la .env.production

      - name: Cleanup
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml --env-file .env down -v 